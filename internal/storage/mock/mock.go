// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "graduation/internal/entity"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// AddEventUser mocks base method.
func (m *MockUserStorage) AddEventUser(ctx context.Context, tick *entity.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventUser", ctx, tick)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventUser indicates an expected call of AddEventUser.
func (mr *MockUserStorageMockRecorder) AddEventUser(ctx, tick interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventUser", reflect.TypeOf((*MockUserStorage)(nil).AddEventUser), ctx, tick)
}

// DellEventUser mocks base method.
func (m *MockUserStorage) DellEventUser(ctx context.Context, eventID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DellEventUser", ctx, eventID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DellEventUser indicates an expected call of DellEventUser.
func (mr *MockUserStorageMockRecorder) DellEventUser(ctx, eventID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DellEventUser", reflect.TypeOf((*MockUserStorage)(nil).DellEventUser), ctx, eventID, userID)
}

// GetUser mocks base method.
func (m *MockUserStorage) GetUser(ctx context.Context, login, password string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, login, password)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserStorageMockRecorder) GetUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserStorage)(nil).GetUser), ctx, login, password)
}

// GetUserEvents mocks base method.
func (m *MockUserStorage) GetUserEvents(ctx context.Context, userID int) ([]entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEvents", ctx, userID)
	ret0, _ := ret[0].([]entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEvents indicates an expected call of GetUserEvents.
func (mr *MockUserStorageMockRecorder) GetUserEvents(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEvents", reflect.TypeOf((*MockUserStorage)(nil).GetUserEvents), ctx, userID)
}

// SetUser mocks base method.
func (m *MockUserStorage) SetUser(ctx context.Context, login, password, mail string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUser", ctx, login, password, mail)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUser indicates an expected call of SetUser.
func (mr *MockUserStorageMockRecorder) SetUser(ctx, login, password, mail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockUserStorage)(nil).SetUser), ctx, login, password, mail)
}

// UserTickets mocks base method.
func (m *MockUserStorage) UserTickets(ctx context.Context, userID int) ([]entity.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserTickets", ctx, userID)
	ret0, _ := ret[0].([]entity.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserTickets indicates an expected call of UserTickets.
func (mr *MockUserStorageMockRecorder) UserTickets(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTickets", reflect.TypeOf((*MockUserStorage)(nil).UserTickets), ctx, userID)
}

// MockEventStorage is a mock of EventStorage interface.
type MockEventStorage struct {
	ctrl     *gomock.Controller
	recorder *MockEventStorageMockRecorder
}

// MockEventStorageMockRecorder is the mock recorder for MockEventStorage.
type MockEventStorageMockRecorder struct {
	mock *MockEventStorage
}

// NewMockEventStorage creates a new mock instance.
func NewMockEventStorage(ctrl *gomock.Controller) *MockEventStorage {
	mock := &MockEventStorage{ctrl: ctrl}
	mock.recorder = &MockEventStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStorage) EXPECT() *MockEventStorageMockRecorder {
	return m.recorder
}

// CloseEvent mocks base method.
func (m *MockEventStorage) CloseEvent(ctx context.Context, userID, eventID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseEvent", ctx, userID, eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseEvent indicates an expected call of CloseEvent.
func (mr *MockEventStorageMockRecorder) CloseEvent(ctx, userID, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseEvent", reflect.TypeOf((*MockEventStorage)(nil).CloseEvent), ctx, userID, eventID)
}

// CreateEvent mocks base method.
func (m *MockEventStorage) CreateEvent(ctx context.Context, e *entity.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventStorageMockRecorder) CreateEvent(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventStorage)(nil).CreateEvent), ctx, e)
}

// DellEvent mocks base method.
func (m *MockEventStorage) DellEvent(ctx context.Context, userID, eventID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DellEvent", ctx, userID, eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DellEvent indicates an expected call of DellEvent.
func (mr *MockEventStorageMockRecorder) DellEvent(ctx, userID, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DellEvent", reflect.TypeOf((*MockEventStorage)(nil).DellEvent), ctx, userID, eventID)
}

// GetEvent mocks base method.
func (m *MockEventStorage) GetEvent(ctx context.Context, eventID int) (*entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, eventID)
	ret0, _ := ret[0].(*entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockEventStorageMockRecorder) GetEvent(ctx, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockEventStorage)(nil).GetEvent), ctx, eventID)
}

// GetEvents mocks base method.
func (m *MockEventStorage) GetEvents(ctx context.Context, from, to time.Time, limit, page int) ([]entity.Event, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx, from, to, limit, page)
	ret0, _ := ret[0].([]entity.Event)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockEventStorageMockRecorder) GetEvents(ctx, from, to, limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockEventStorage)(nil).GetEvents), ctx, from, to, limit, page)
}

// GetImage mocks base method.
func (m *MockEventStorage) GetImage(ctx context.Context, filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockEventStorageMockRecorder) GetImage(ctx, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockEventStorage)(nil).GetImage), ctx, filename)
}

// MockNotificationStorage is a mock of NotificationStorage interface.
type MockNotificationStorage struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationStorageMockRecorder
}

// MockNotificationStorageMockRecorder is the mock recorder for MockNotificationStorage.
type MockNotificationStorageMockRecorder struct {
	mock *MockNotificationStorage
}

// NewMockNotificationStorage creates a new mock instance.
func NewMockNotificationStorage(ctrl *gomock.Controller) *MockNotificationStorage {
	mock := &MockNotificationStorage{ctrl: ctrl}
	mock.recorder = &MockNotificationStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationStorage) EXPECT() *MockNotificationStorageMockRecorder {
	return m.recorder
}

// EventsToday mocks base method.
func (m *MockNotificationStorage) EventsToday(ctx context.Context, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventsToday", ctx, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventsToday indicates an expected call of EventsToday.
func (mr *MockNotificationStorageMockRecorder) EventsToday(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventsToday", reflect.TypeOf((*MockNotificationStorage)(nil).EventsToday), ctx, date)
}

// GetMessages mocks base method.
func (m *MockNotificationStorage) GetMessages(ctx context.Context, date time.Time) ([]entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, date)
	ret0, _ := ret[0].([]entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockNotificationStorageMockRecorder) GetMessages(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockNotificationStorage)(nil).GetMessages), ctx, date)
}

// MessageUpdate mocks base method.
func (m *MockNotificationStorage) MessageUpdate(ctx context.Context, eventID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageUpdate", ctx, eventID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageUpdate indicates an expected call of MessageUpdate.
func (mr *MockNotificationStorageMockRecorder) MessageUpdate(ctx, eventID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageUpdate", reflect.TypeOf((*MockNotificationStorage)(nil).MessageUpdate), ctx, eventID, userID)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddEventUser mocks base method.
func (m *MockStorage) AddEventUser(ctx context.Context, tick *entity.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventUser", ctx, tick)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventUser indicates an expected call of AddEventUser.
func (mr *MockStorageMockRecorder) AddEventUser(ctx, tick interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventUser", reflect.TypeOf((*MockStorage)(nil).AddEventUser), ctx, tick)
}

// CloseEvent mocks base method.
func (m *MockStorage) CloseEvent(ctx context.Context, userID, eventID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseEvent", ctx, userID, eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseEvent indicates an expected call of CloseEvent.
func (mr *MockStorageMockRecorder) CloseEvent(ctx, userID, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseEvent", reflect.TypeOf((*MockStorage)(nil).CloseEvent), ctx, userID, eventID)
}

// CreateEvent mocks base method.
func (m *MockStorage) CreateEvent(ctx context.Context, e *entity.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockStorageMockRecorder) CreateEvent(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockStorage)(nil).CreateEvent), ctx, e)
}

// DellEvent mocks base method.
func (m *MockStorage) DellEvent(ctx context.Context, userID, eventID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DellEvent", ctx, userID, eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DellEvent indicates an expected call of DellEvent.
func (mr *MockStorageMockRecorder) DellEvent(ctx, userID, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DellEvent", reflect.TypeOf((*MockStorage)(nil).DellEvent), ctx, userID, eventID)
}

// DellEventUser mocks base method.
func (m *MockStorage) DellEventUser(ctx context.Context, eventID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DellEventUser", ctx, eventID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DellEventUser indicates an expected call of DellEventUser.
func (mr *MockStorageMockRecorder) DellEventUser(ctx, eventID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DellEventUser", reflect.TypeOf((*MockStorage)(nil).DellEventUser), ctx, eventID, userID)
}

// EventsToday mocks base method.
func (m *MockStorage) EventsToday(ctx context.Context, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventsToday", ctx, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventsToday indicates an expected call of EventsToday.
func (mr *MockStorageMockRecorder) EventsToday(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventsToday", reflect.TypeOf((*MockStorage)(nil).EventsToday), ctx, date)
}

// GetEvent mocks base method.
func (m *MockStorage) GetEvent(ctx context.Context, eventID int) (*entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, eventID)
	ret0, _ := ret[0].(*entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockStorageMockRecorder) GetEvent(ctx, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockStorage)(nil).GetEvent), ctx, eventID)
}

// GetEvents mocks base method.
func (m *MockStorage) GetEvents(ctx context.Context, from, to time.Time, limit, page int) ([]entity.Event, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx, from, to, limit, page)
	ret0, _ := ret[0].([]entity.Event)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockStorageMockRecorder) GetEvents(ctx, from, to, limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockStorage)(nil).GetEvents), ctx, from, to, limit, page)
}

// GetImage mocks base method.
func (m *MockStorage) GetImage(ctx context.Context, filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockStorageMockRecorder) GetImage(ctx, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockStorage)(nil).GetImage), ctx, filename)
}

// GetMessages mocks base method.
func (m *MockStorage) GetMessages(ctx context.Context, date time.Time) ([]entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, date)
	ret0, _ := ret[0].([]entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockStorageMockRecorder) GetMessages(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockStorage)(nil).GetMessages), ctx, date)
}

// GetUser mocks base method.
func (m *MockStorage) GetUser(ctx context.Context, login, password string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, login, password)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorageMockRecorder) GetUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorage)(nil).GetUser), ctx, login, password)
}

// GetUserEvents mocks base method.
func (m *MockStorage) GetUserEvents(ctx context.Context, userID int) ([]entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEvents", ctx, userID)
	ret0, _ := ret[0].([]entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEvents indicates an expected call of GetUserEvents.
func (mr *MockStorageMockRecorder) GetUserEvents(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEvents", reflect.TypeOf((*MockStorage)(nil).GetUserEvents), ctx, userID)
}

// MessageUpdate mocks base method.
func (m *MockStorage) MessageUpdate(ctx context.Context, eventID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageUpdate", ctx, eventID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageUpdate indicates an expected call of MessageUpdate.
func (mr *MockStorageMockRecorder) MessageUpdate(ctx, eventID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageUpdate", reflect.TypeOf((*MockStorage)(nil).MessageUpdate), ctx, eventID, userID)
}

// SetUser mocks base method.
func (m *MockStorage) SetUser(ctx context.Context, login, password, mail string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUser", ctx, login, password, mail)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUser indicates an expected call of SetUser.
func (mr *MockStorageMockRecorder) SetUser(ctx, login, password, mail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockStorage)(nil).SetUser), ctx, login, password, mail)
}

// UserTickets mocks base method.
func (m *MockStorage) UserTickets(ctx context.Context, userID int) ([]entity.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserTickets", ctx, userID)
	ret0, _ := ret[0].([]entity.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserTickets indicates an expected call of UserTickets.
func (mr *MockStorageMockRecorder) UserTickets(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTickets", reflect.TypeOf((*MockStorage)(nil).UserTickets), ctx, userID)
}
